Description: Compatibility fixes for ICU 65.
 Upstream's approach with adding additional mappings to
 Locale.canonical does not work when the testsuite is being run before
 the package gets installed, as is the case for Debian.  Therefore
 I've changed the test to use the new mapping which works with all ICU
 versions.  Will forward upstream if no other solution is found.
Bug-Debian: https://bugs.debian.org/952156
Origin: upstream, commit:5248b6e, commit:8794339
Last-Update: 2020-04-03
---

--- gnustep-base.orig/Resources/Languages/Locale.canonical
+++ gnustep-base/Resources/Languages/Locale.canonical
@@ -573,4 +573,27 @@
   zha = za;
   zho = zh;
   zul = zu;
+  ca_ES_PREEURO = "ca_ES@currency=ESP";
+  de_AT_PREEURO = "de_AT@currency=ATS";
+  de_DE_PREEURO = "de_DE@currency=DEM";
+  de_LU_PREEURO = "de_LU@currency=LUF";
+  el_GR_PREEURO = "el_GR@currency=GRD";
+  en_BE_PREEURO = "en_BE@currency=BEF";
+  en_IE_PREEURO = "en_IE@currency=IEP";
+  es_ES_PREEURO = "es_ES@currency=ESP";
+  eu_ES_PREEURO = "eu_ES@currency=ESP";
+  fi_FI_PREEURO = "fi_FI@currency=FIM";
+  fr_BE_PREEURO = "fr_BE@currency=BEF";
+  fr_FR_PREEURO = "fr_FR@currency=FRF";
+  fr_LU_PREEURO = "fr_LU@currency=LUF";
+  ga_IE_PREEURO = "ga_IE@currency=IEP";
+  gl_ES_PREEURO = "gl_ES@currency=ESP";
+  it_IT_PREEURO = "it_IT@currency=ITL";
+  nl_BE_PREEURO = "nl_BE@currency=BEF";
+  nl_NL_PREEURO = "nl_NL@currency=NLG";
+  pt_PT_PREEURO = "pt_PT@currency=PTE";
+  de__PHONEBOOK = "de@collation=phonebook";
+  es__TRADITIONAL = "es@collation=traditional";
+  hi__DIRECT = "hi@collation=direct";
+  ja_JP_TRADITIONAL = "ja_JP@calendar=japanese";
 }
--- gnustep-base.orig/Source/NSString.m
+++ gnustep-base/Source/NSString.m
@@ -663,28 +663,43 @@
     {
       return NULL;
     }
-  
-  if (locale == nil)
+
+  if (NO == [locale isKindOfClass: [NSLocale class]])
     {
-      /* A nil locale should trigger POSIX collation (i.e. 'A'-'Z' sort
-       * before 'a'), and support for this was added in ICU 4.6 under the
-       * locale name en_US_POSIX, but it doesn't fit our requirements
-       * (e.g. 'e' and 'E' don't compare as equal with case insensitive
-       * comparison.) - so return NULL to indicate that the GNUstep
-       * comparison code should be used.
-       */
-      return NULL;
+      if (nil == locale)
+        {
+          /* See comments below about the posix locale.
+           * It's bad for case insensitive search, but needed for numeric
+           */
+          if (mask & NSNumericSearch)
+            {
+              locale = [NSLocale systemLocale];
+            }
+          else
+            {
+              /* A nil locale should trigger POSIX collation (i.e. 'A'-'Z' sort
+               * before 'a'), and support for this was added in ICU 4.6 under the
+               * locale name en_US_POSIX, but it doesn't fit our requirements
+               * (e.g. 'e' and 'E' don't compare as equal with case insensitive
+               * comparison.) - so return NULL to indicate that the GNUstep
+               * comparison code should be used.
+               */
+              return NULL;
+            }
+        }
+      else
+        {
+          locale = [NSLocale currentLocale];
+        }
     }
-  else
-    {
-      localeCString = [[locale localeIdentifier] UTF8String];
 
-      if (localeCString == NULL || strcmp("", localeCString) == 0)
-	{
-	  return NULL;
-	}
+  localeCString = [[locale localeIdentifier] UTF8String];
+
+  if (localeCString != NULL && strcmp("", localeCString) == 0)
+    {
+      localeCString = NULL;
     }
-	  
+
   coll = ucol_open(localeCString, &status);
 
   if (U_SUCCESS(status))
@@ -2702,10 +2717,6 @@
     }
 
 #if GS_USE_ICU == 1
-  if (nil != locale && NO == [locale isKindOfClass: [NSLocale class]])
-    {
-      locale = [NSLocale currentLocale];
-    }
     {
       UCollator *coll = GSICUCollatorOpen(mask, locale);
 
@@ -5682,23 +5693,6 @@
     [NSException raise: NSInvalidArgumentException format: @"compare with nil"];
 
 #if GS_USE_ICU == 1
-  if (NO == [locale isKindOfClass: [NSLocale class]])
-    {
-      if (nil == locale)
-        {
-          /* See comments in GSICUCollatorOpen about the posix locale.
-           * It's bad for case insensitive search, but needed for numeric    
-           */
-          if (mask & NSNumericSearch)
-            {
-              locale = [NSLocale systemLocale];
-            }
-        }
-      else
-        {
-          locale = [NSLocale currentLocale];
-        }
-    }
     {
       UCollator *coll = GSICUCollatorOpen(mask, locale);
 
--- gnustep-base.orig/Tests/base/NSLocale/general.m
+++ gnustep-base/Tests/base/NSLocale/general.m
@@ -22,7 +22,7 @@
 
   // These tests don't really work all that well.  I need to come up with
   // something better.  Most of the ones that fail are because nil is returned.
-  locale = [[NSLocale alloc] initWithLocaleIdentifier: @"es_ES_PREEURO"];
+  locale = [[NSLocale alloc] initWithLocaleIdentifier: @"es_ES@currency=ESP"];
   PASS_EQUAL([locale objectForKey: NSLocaleIdentifier],
     @"es_ES@currency=ESP",
     "NSLocaleIdentifier key returns 'es_ES@currency=ESP'");
